mnist <- dataset_mnist()
install.packages("tensorflow")
mnist <- dataset_mnist()
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
mnist <- dataset_mnist()
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
library(tensorflow)
install_tensorflow()
library(tensorflow)
tf$constant("Hellow Tensorflow")
install_tensorflow()
library(tensorflow)
tf$constant("Hellow Tensorflow")
library(tensorflow)
Sys.setenv(RETICULATE_PYTHON="/usr/local/bin/python")
tf$constant("Hellow Tensorflow")
library(keras)
mnist <- dataset_mnist()
mnist$train$x <- mnist$train$x/255
mnist$test$x <- mnist$test$x/255
View(mnist)
View(mnist)
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(28, 28)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(0.2) %>%
layer_dense(10, activation = "softmax")
summary(model)
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = mnist$train$x, y = mnist$train$y,
epochs = 5,
validation_split = 0.3,
verbose = 2
)
predictions <- predict(model, mnist$test$x)
head(predictions, 2)
model %>%
evaluate(mnist$test$x, mnist$test$y, verbose = 0)
save_model_tf(object = model, filepath = "model")
reloaded_model <- load_model_tf("model")
all.equal(predict(model, mnist$test$x), predict(reloaded_model, mnist$test$x))
library(keras)
fashion_mnist <- dataset_fashion_mnist()
View(fashion_mnist)
dim(train_images)
c(train_images, train_labels) %<-% fashion_mnist$train
c(test_images, test_labels) %<-% fashion_mnist$test
dim(train_images)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
View(df)
?rnorm
# We can to compute the median of each column. You could do with copy-and-paste:
median (df$a)
median (df$b)
median (df$c)
median (df$d)
output <- vector("double", ncol(df))
1:10 %% 3 == 0
output <- vector("double", ncol(df))
for(i in seq_along(df)){
output[[i]] <- median(df[[i]])
}
output
#We can to compute the median of each column. You could do with copy-and-paste:
median (df$a)
median (df$b)
median (df$c)
median (df$d)
df <- mtcars
View(df)
output <- vector('double',ncol(df))
seq_along(df)
output[[i]] <- mean(df[[i]])
output}
outpu
output
df <- mtcars
output <- vector('double',ncol(df))
for(i in seq_along(df)){
output[[i]] <- mean(df[[i]])
}
output
# 2.Determine the type of each column in nycflights13::flights.
df <- nycflights13::flights
View(df)
## Exercise
# 1. Compute the mean of every column in mtcars.
df <- mtcars
# 2.Determine the type of each column in nycflights13::flights.
df <- nycflights13::flights
output <- vector('double',ncol(df))
output[[i]] <- typeof(df[[i]])
# 2.Determine the type of each column in nycflights13::flights.
df <- nycflights13::flights
output <- vector('double',ncol(df))
for(i in seq_along(df)){
output[[i]] <- typeof(df[[i]])
}
output
# 3. Compute the number of unique values in each column of iris.
df <- iris
View(df)
output <- vector('double',ncol(df))
output[[i]] <- unique(df[[i]])
for( i in seq_along(df)){
output[[i]] <- length(unique(df[[i]]))
}
output
# Modifying an existing object
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
df$a <- rescale01(df$a)
df$b <- rescale01(df$b)
df$c <- rescale01(df$c)
# Modifying an existing object
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
# Iteration
# https://r4ds.had.co.nz/iteration.html
library(tidyverse)
# Modifying an existing object
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
df$a <- rescale01(df$a)
df$b <- rescale01(df$b)
df$c <- rescale01(df$c)
View(df)
# Modifying an existing object
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
df$a <- rescale01(df$a)
df$b <- rescale01(df$b)
df$c <- rescale01(df$c)
df$d <- rescale01(df$d)
# Modifying an existing object
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
df[[i]] <- rescale01(df[[i]])
#or I can do this:
for(in in seq_along(df)){
df[[i]] <- rescale01(df[[i]])
}
# Modifying an existing object
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
#or I can do this:
for(in in seq_along(df)){
df[[i]] <- rescale01(df[[i]])
}
#or I can do this:
for(i in seq_along(df)) {
df[[i]] <- rescale01(df[[i]])
}
View(df)
df <- tibble::tibble(
a = c(1,2,3,4,5),
b = c(6,7,8,9,10),
c = c(11,12,13,14,15),
d = c(16,17,18,19,20)
)
View(df)
#or I can do this:
for(i in seq_along(df)) {
df[[i]] <- rescale01(df[[i]])
}
df <- tibble::tibble(
a = c(1,2,3,4,5),
b = c(6,7,8,9,10),
c = c(11,12,13,14,15),
d = c(16,17,18,19,20)
)
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
map(df,rescale01())
map(df,rescale01)
lubridate::now() + runif(1e3) * 86400
lubridate::now()
lubridate::now() + runif(1e3)
unif(1e3)
runif(1e3)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
library(tidyverse)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
df <- tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
View(df)
?runif
runif(3)
hist(df$d)
runif(3)
?runif
lubridate::today() + runif(1e3) * 30
View(df)
nycflights13::flights %>%
print(n = 10, width = Inf)
df <- as_tibble(mtcars)
mtcars
df
df %>% print(n = 12)
df %>% print(n = 12, widtt = Inf)
df %>% print(n = 12, widtt = 3)
df %>% print(n = 12, widtt = 3)
df %>% print(n = 12, width = 3)
df %>% print(n = 12, width = Inf)
nycflights13::flights %>%
print(n = 10, width = 3)
nycflights13::flights %>%
print(n = 15)
nycflights13::flights %>%
print(n = 15, width = Inf)
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df <- tibble(
x = runif(100),
y = rnorm(100)
)
hist(df[[x]])
View(df)
hist(df[['x']])
hist(df[['y']])
df <- tibble(
x = runif(10),
y = rnorm(100)
)
df <- tibble(
x = runif(10),
y = rnorm(10)
)
hist(df[['y']])
hist(df[['x']])
df <- tibble(
x = runif(1000),
y = rnorm(1000)
)
hist(df[['x']])
hist(df[['y']])
hist(df[['x']])
hist(df[['y']])
df %>% .[['x']]
# a column can be retrieved from a tibble using a placeholder:
df %>% .[['x']] %>% hist
# a column can be retrieved from a tibble using a placeholder:
df %>% .[['y']] %>% hist
# a column can be retrieved from a tibble using a placeholder:
df %>% .[['y']] %>% hist()
# a column can be retrieved from a tibble using a placeholder:
df %>% .[['x']] %>% hist()
# I can use that information to create a graph
df %>% .$y %>%  hist()
df %>%  .[['y']] %>% hist()
?runif
## Exercise
# 1. How can you tell if an object is a tibble?
mtcar
## Exercise
# 1. How can you tell if an object is a tibble?
mtcar
## Exercise
# 1. How can you tell if an object is a tibble?
mtcars
as_tibble(mtcars)
df <- data.frame(abc = 1, xyz = "a")
View(df)
df[['x']]
is_tibble(mtcars)
# there are a difference between them when you print
is_tibble(diamonds)
ggplot2::
# there are a difference between them when you print
is_tibble(ggplot2::diamonds)
is_tibble(nycflights13::flights)
is_tibble(nycflights13::flights)
class(mtcars)
class(diamonds)
class(ggplot2::diamonds)
class(flights)
class(nycflights13::flights)
nycflights13::flights
df$a
df$x
df[, "xyz"]
df[, "xyz"]
df[, c("abc", "xyz")]
df <- as_tibbe(df)
df$x
df <- as_tibbe(df)
df$x
# Compare and contrast the following operations on a data.frame and equivalent tibble. What is different? Why might the default data frame behaviours cause you frustration?
df <- data.frame(abc = 1, xyz = "a")
tbl <- as_tibbe(df)
tbl <- as_tibble(df)
tbl$x
tbl[, "xyz"]
tbl[, c("abc", "xyz")]
df[, "xyz"]
df[, c("abc", "xyz")]
var <- "mpg"
mtcars[[var]]
mtcars$var
mtcars[[var]]
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
annoying[['1']]
annoying[['2']]
annoying$'2'
annoying %>% ggplot(mapping = aes(x = '1', y = '2')) + geom_point()
View(annoying)
annoying$`2`
annoying %>% ggplot(mapping = aes(x = `1`, y = `2`)) + geom_point()
mutate(`3` = `2`/1)
View(annoying)
mutate(`3` = `2`/`1`)
mutate(`3` = `2`/`1`)
mutate(annoy`3` = `2`/`1`)
mutate(annoying, `3` = `2`/`1`)
annoying[[`3`]] <- annoying[[`2`]]/annoying[[`1`]]
annoying[[`3`]] <- annoying[['2']]/annoying[[`1`]]
annoying[[`3`]] <- annoying[['2']]/annoying[['1']]
annoying[['3']] <- annoying[['2']]/annoying[['1']]
annoying[['4']] <- annoying[['2']]/annoying[['1']]
View(annoying)
annoying$`5` <- annoying`4`*5
annoying$`5` <- annoying$`4`*5
View(annoying)
# 10.4 Practice referring to non-syntactic names in the following data frame by:
# 1. Extracting the variable called
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
# 4.Renaming the columns to one, two and three.
annoying <- rename(annoying, one = `1`, two = `2`, three = `3`)
View(annoying)
# 4.Renaming the columns to one, two and three.
annoying <- rename(annoying, one = `1`, two = `2`)
View(annoying)
glimpse(annoying)
# 10.5 What does tibble::enframe() do? When might you use it?
enframe(c(a = 1, b = 2, c = 3))
c(a = 1,
b = 2,
c = 3)
jjj <- c(a = 1, b = 2, c = 3)
jjj <- enframec(a = 1, b = 2, c = 3))
jjj <- enframe(c(a = 1, b = 2, c = 3))
c(a = 1, b = 2, c = 3)
c(a = (1,1), b = (2,2), c = (3,3)
c(a = c(1,1), b = c(2,2), c = c(3,3)
c(a = c(1,1), b = c(2,2), c = c(3,3))
c(a = c(1,1), b = c(2,2), c = c(3,3))
jjj <- enframe(c(a = c(1,1), b = c(2,2), c = c(3,3)))
View(jjj)
jjj <- enframe(c(a = 1, b = 2, c = 3))
View(jjj)
tibble(
a = 1,
b = 2
)
tibble(
a = c(1,2,3),
b = c(2,5,6)
)
parse_double("1.23")
parse_double("1.23")
library(tidyverse)
parse_double("1.23")
parse_double("1,23", locale = locale(decimal_mark = ","))
parse_number("$100")
parse_number("20%")
parse_number("It cost $123.45")
parse_number("$123,456,789")
parse_number("123.456.789", locale = locale(grouping_mark = "."))
parse_number("123'456'789", locale = locale(grouping_mark = "'"))
fruit <- c("apple", "banana")
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
parse_datetime("2010-10-01T2010")
parse_datetime("20101010")
parse_date("2010-10-01")
library(hms)
parse_time("01:10 am")
parse_time("20:10:01")
parse_date("01/02/15", "%m/%d/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
locale()
library(tidyverse)
locale()
# 11.3.1 What are the most important arguments to locale()?
locale(decimal_mark = ",")
locale(decimal_mark = ",")
locale(decimal_mark = ",")
locale(grouping_mark = ".")
# 11.3.3 I didn’t discuss the date_format and time_format options to locale(). What do they do? Construct an example that shows when they might be useful.
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
parse_date("14 oct. 1979", "%d %b %Y", locale = locale("fr"))
parse_date("02/01/2006")
parse_date("02/01/2006")
au_locale <- locale(date_format = "%d/%m/%Y")
parse_date("02/01/2006", locale = au_locale)
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, "%B %d, %Y")
parse_date(d2, %Y-%b-%d)
parse_date(d2, "%Y-%b-%d")
parse_date(d3, "%d-%b-%Y")
parse_date(d4, "%B %d (%Y)")
parse_date(d5,"%m/%d/%y")
parse_time(t1, "%H%M")
parse_time(t2, "%H:%M:%OS %p")
guess_parser("2010-10-01")
guess_parser("15:01")
guess_parser(c("TRUE", "FALSE"))
guess_parser(c("1", "5", "9"))
guess_parser(c("12,352,561"))
str(parse_guess("2010-10-10"))
